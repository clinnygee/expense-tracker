{"ast":null,"code":"var _jsxFileName = \"/home/clinnygee/Documents/portfolio-projects/expense-tracker/src/user-context.js\";\nimport React, { createContext } from 'react';\nconst UserContext = createContext({\n  username: '',\n  transactions: [],\n  _id: '',\n  authenticated: false,\n  jwt: '',\n  updateUserData: () => {},\n  logInSuccess: () => {},\n  signOut: () => {},\n  setJwt: () => {},\n  getUserData: () => {},\n  requestUpdate: () => {},\n  selectedMonth: '',\n  selectedYear: '',\n  updateSelectedMonth: () => {},\n  updateSelectedYear: () => {}\n});\nexport class UserProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateUserData = newUserData => {\n      console.log(newUserData);\n      newUserData.transactions.sort((a, b) => {\n        return new Date(b.date) - new Date(a.date);\n      });\n      console.log(newUserData.transactions);\n      this.setState({\n        username: newUserData.username,\n        transactions: newUserData.transactions,\n        _id: newUserData._id\n      });\n    };\n\n    this.logInSuccess = () => {\n      console.log('in context loginsuccess');\n      this.setState({\n        authenticated: true\n      });\n      this.getUserData();\n    };\n\n    this.setJwt = jwt => {\n      console.log('in context setjwt');\n      this.setState({\n        jwt: jwt\n      });\n    };\n\n    this.signOut = () => {};\n\n    this.getUserData = () => {\n      let token = sessionStorage.getItem('jwt');\n      fetch('/dashboard', {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \".concat(token)\n        }\n      }).then(response => {\n        return response.json();\n      }).then(parsedJson => {\n        console.log(parsedJson);\n        this.updateUserData(parsedJson); // this.setTransactionData(parsedJson.transactions);\n      });\n    };\n\n    this.requestUpdate = () => {\n      console.log('update requested');\n      this.getUserData();\n    };\n\n    this.updateSelectedMonth = month => {\n      console.log('in updateSelectedMonth, month: ' + this.state.selectedMonth);\n      this.setState({\n        selectedMonth: month\n      });\n    };\n\n    this.updateSelectedYear = year => {\n      console.log('in updateSelected year, year: ' + this.state.selectedYear);\n      this.setState({\n        selectedYear: year\n      });\n    };\n\n    this.state = {\n      username: '',\n      transactions: [],\n      _id: '',\n      selectedMonth: new Date().getMonth(),\n      selectedYear: new Date().getFullYear(),\n      updateUserData: this.updateUserData,\n      logInSuccess: this.logInSuccess,\n      setJwt: this.setJwt,\n      signOut: this.signOut,\n      getUserData: this.getUserData,\n      requestUpdate: this.requestUpdate,\n      updateSelectedMonth: this.updateSelectedMonth,\n      updateSelectedYear: this.updateSelectedYear\n    };\n  }\n\n  render() {\n    return React.createElement(UserContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n;\nexport const UserConsumer = UserContext.Consumer;","map":{"version":3,"sources":["/home/clinnygee/Documents/portfolio-projects/expense-tracker/src/user-context.js"],"names":["React","createContext","UserContext","username","transactions","_id","authenticated","jwt","updateUserData","logInSuccess","signOut","setJwt","getUserData","requestUpdate","selectedMonth","selectedYear","updateSelectedMonth","updateSelectedYear","UserProvider","Component","newUserData","console","log","sort","a","b","Date","date","setState","token","sessionStorage","getItem","fetch","method","headers","then","response","json","parsedJson","month","state","year","getMonth","getFullYear","render","props","children","UserConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, {createContext} from 'react';\n\n\nconst UserContext = createContext({\n    username: '',\n    transactions: [],\n    _id: '',\n    authenticated: false,\n    jwt: '',\n    updateUserData: () => {},\n    logInSuccess: () => {},\n    signOut: () => {},\n    setJwt: () => {},\n    getUserData: () => {},\n    requestUpdate: () => {},\n    selectedMonth: '',\n    selectedYear: '',\n    updateSelectedMonth: () => {},\n    updateSelectedYear: () => {},\n});\n\nexport class UserProvider extends React.Component {\n\n    \n    // Change this to be a fetch call, so it can be called when a refresh is required when data is changed on the server, \n    // and when the user successfully logs in\n    updateUserData = newUserData => {\n        console.log(newUserData);\n        newUserData.transactions.sort((a, b) => {\n            return new Date(b.date) - new Date(a.date);\n        })\n        console.log(newUserData.transactions);\n        this.setState({username: newUserData.username, transactions: newUserData.transactions, _id: newUserData._id})\n    };\n    // When this is called, call the function to fetch user data.\n    logInSuccess = () => {\n        console.log('in context loginsuccess')\n        this.setState({authenticated: true});\n        this.getUserData()\n        \n    };\n\n    setJwt = jwt => {\n        console.log('in context setjwt')\n        this.setState({jwt: jwt});\n    };\n\n    signOut = () => {\n\n    };\n\n    getUserData = () => {\n        let token = sessionStorage.getItem('jwt');\n\n        fetch('/dashboard', {\n            method: 'GET',\n            headers: {\n                'content-type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            }\n        }).then(response => {\n            return response.json();\n        }).then(parsedJson => {\n            console.log(parsedJson);\n            this.updateUserData(parsedJson);\n            // this.setTransactionData(parsedJson.transactions);\n        })\n    };\n\n    requestUpdate = () => {\n        console.log('update requested');\n        this.getUserData();\n    }\n\n    updateSelectedMonth = (month) => {\n        console.log('in updateSelectedMonth, month: ' + this.state.selectedMonth)\n        this.setState({selectedMonth: month});\n    };\n\n    updateSelectedYear = (year) => {\n        console.log('in updateSelected year, year: ' + this.state.selectedYear)\n        this.setState({selectedYear: year});\n    };\n\n    state = {\n        username: '',\n        transactions: [],\n        _id: '',\n        selectedMonth: new Date().getMonth(),\n        selectedYear: new Date().getFullYear(),\n        updateUserData: this.updateUserData,\n        logInSuccess: this.logInSuccess,\n        setJwt: this.setJwt,\n        signOut: this.signOut,\n        getUserData: this.getUserData,\n        requestUpdate: this.requestUpdate,\n        updateSelectedMonth: this.updateSelectedMonth,\n        updateSelectedYear: this.updateSelectedYear,\n    };\n\n    \n\n    render(){\n        return(\n            <UserContext.Provider value={this.state}>\n                {this.props.children}\n            </UserContext.Provider>\n        )\n    };\n};\n\nexport const UserConsumer = UserContext.Consumer;"]},"metadata":{},"sourceType":"module"}