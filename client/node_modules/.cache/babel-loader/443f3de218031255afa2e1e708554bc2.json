{"ast":null,"code":"'use strict';\n/**\n * Month-Picker\n *\n * Properties:\n * @years:\n *  - array: [2013, 2015, 2016]\n *  - number: 5 (last 4 years and this year)\n *  - object: {min: 2013, max: 2016} (from 2013 to 2016); {min: 2013} (from 2013 to this year); {max: 2015} (5 years to 2015)\n * @value: default value for picking a single month, e.g. {year: 2015: month: 11}\n * @range: default value for picking a span of months, e.g. {from: {year: 2014: month: 7}, to: {year: 2015: month: 11}}\n * @lang: language texts\n *  - array: array of months' texts, e.g. ['Jan', 'Feb', 'Mar', 'Spr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n *  - object: including array of months' texts and other display texts\n *      e.g. {from: \"From:\", to: \"To:\", months: [...]}\n * @theme: theme setting of month-picker; 2 options (light/dark); default theme is light\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactTapper = require('react-tapper');\n\nvar _reactTapper2 = _interopRequireDefault(_reactTapper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar isBrowser = typeof window !== \"undefined\" && typeof document !== \"undefined\";\nvar __MIN_VALID_YEAR = 1;\n\nfunction mapToArray(num, callback) {\n  var arr = [];\n\n  for (var i = 0; i < num; i++) {\n    arr.push(callback(i));\n  }\n\n  return arr;\n}\n\nfunction getYearMon(year, min, max) {\n  var ym = (typeof year === 'undefined' ? 'undefined' : _typeof(year)) === 'object' && year.year ? {\n    year: year.year,\n    month: year.month\n  } : {\n    year: year\n  };\n  ym.min = min || 1;\n  ym.max = max || 12;\n  return ym;\n}\n\nfunction getYearsByNum(n, minYear) {\n  var maxYear = new Date().getFullYear(); // n is number of years\n\n  if (n && n > 0 && n < 1000) {\n    minYear = minYear || maxYear - n + 1;\n  } // n is invalid value\n  else {\n      // n is max year\n      if (n && n >= 1000) maxYear = n;\n\n      if (minYear) {\n        n = maxYear - minYear + 1;\n      } else {\n        n = 5;\n        minYear = maxYear - n + 1;\n      }\n    }\n\n  return mapToArray(n, function (i) {\n    return getYearMon(minYear + i);\n  });\n}\n\nfunction getYearArray(years) {\n  if (Array.isArray(years)) return years.map(function (y, i) {\n    return getYearMon(y);\n  });\n\n  if ((typeof years === 'undefined' ? 'undefined' : _typeof(years)) === 'object') {\n    var n = 0,\n        min = 0,\n        ymin = getYearMon(years.min),\n        ymax = getYearMon(years.max);\n    if (typeof ymin.year === 'number' && ymin.year > __MIN_VALID_YEAR) min = ymin.year;\n    if (typeof ymax.year === 'number' && ymax.year >= min) n = ymax.year;\n    var arr = getYearsByNum(n, min),\n        last = arr.length - 1;\n\n    if (last >= 0) {\n      arr[0].min = ymin.month || arr[0].month;\n      arr[last].max = ymax.month || arr[last].month;\n    }\n\n    return arr;\n  } else if (typeof years === 'number' && years > 0) return getYearsByNum(years);else return getYearsByNum(5);\n}\n\nvar MonthPicker = function (_Component) {\n  _inherits(MonthPicker, _Component);\n\n  function MonthPicker(props, context) {\n    _classCallCheck(this, MonthPicker);\n\n    var _this = _possibleConstructorReturn(this, (MonthPicker.__proto__ || Object.getPrototypeOf(MonthPicker)).call(this, props, context));\n\n    var yearArr = getYearArray(_this.props.years),\n        yearIndexes = [0],\n        values = _this.validValues(_this.props.range || _this.props.value, yearArr, yearIndexes);\n\n    _this.state = {\n      years: yearArr,\n      values: values,\n      labelYears: [false, false],\n      showed: _this.props.show,\n      closeable: _this.props.show,\n      //special, must not be changed with setState\n      yearIndexes: yearIndexes,\n      lastRange: _this.props.range,\n      lastValue: _this.props.value\n    };\n    _this._handleOverlayTouchTap = _this._handleOverlayTouchTap.bind(_this);\n    _this.handleClickMonth = _this.handleClickMonth.bind(_this);\n    _this.goPrevYear = _this.goPrevYear.bind(_this);\n    _this.goNextYear = _this.goNextYear.bind(_this);\n    _this._keyDown = _this._keyDown.bind(_this);\n    return _this;\n  }\n\n  _createClass(MonthPicker, [{\n    key: 'validate',\n    value: function validate(d, years, idx, yearIndexes) {\n      var now = new Date(),\n          thisYear = now.getFullYear(),\n          ym = void 0;\n\n      if (d && typeof d.year === 'number' && d.year > __MIN_VALID_YEAR && typeof d.month === 'number' && d.month >= 1 && d.month <= 12) {\n        ym = d;\n      }\n\n      var foundThisYear = void 0;\n\n      for (var i = 0; i < years.length; i++) {\n        if (ym && years[i].year === ym.year) {\n          yearIndexes[idx] = i;\n          return ym;\n        } else if (years[i].year === thisYear) {\n          foundThisYear = i;\n        }\n      }\n\n      if (typeof foundThisYear === 'number') {\n        yearIndexes[idx] = foundThisYear;\n        return {\n          year: thisYear\n        };\n      }\n\n      var last = yearIndexes[idx] = years.length - 1;\n      return {\n        year: years[last].year\n      };\n    }\n  }, {\n    key: 'validValues',\n    value: function validValues(v, years, yearIndexes) {\n      if (!v) return [];\n\n      if (v.from || v.to) {\n        var from = this.validate(v.from, years, 0, yearIndexes),\n            to = this.validate(v.to, years, 1, yearIndexes);\n\n        if (from.year > to.year || from.year === to.year && from.month > to.month) {\n          from.year = to.year;\n          from.month = to.month;\n\n          if (from.month < 1) {\n            from.year--;\n            from.month += 12;\n          }\n        }\n\n        return [from, to];\n      }\n\n      return [this.validate(v, years, 0, yearIndexes)];\n    }\n  }, {\n    key: 'value',\n    value: function value() {\n      var values = this.state.values;\n      if (values.length >= 2) return {\n        from: values[0],\n        to: values[1]\n      };else if (values.length === 1) return values[0];\n      return {};\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var yearArr = getYearArray(nextProps.years),\n          yearIndexes = this.state.yearIndexes,\n          nextValues = nextProps.range || nextProps.value //|| this.props.range || this.props.value\n      ,\n          values = this.validValues(nextValues, yearArr, yearIndexes);\n      this.setState({\n        years: yearArr,\n        values: values,\n        labelYears: [false, false],\n        yearIndexes: yearIndexes,\n        lastRange: nextProps.range,\n        lastValue: nextProps.value,\n        showed: nextProps.show,\n        closeable: nextProps.show\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (isBrowser) {\n        document.addEventListener('keydown', this._keyDown);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (isBrowser) {\n        document.removeEventListener('keydown', this._keyDown);\n      }\n    }\n  }, {\n    key: 'optionPad',\n    value: function optionPad(padIndex) {\n      var _this2 = this;\n\n      var values = this.state.values,\n          value = values[padIndex],\n          labelYears = this.state.labelYears,\n          labelYear = labelYears[padIndex] = labelYears[padIndex] || value.year,\n          ymArr = this.state.years,\n          lang = this.props.lang || [],\n          months = Array.isArray(lang) ? lang : Array.isArray(lang.months) ? lang.months : [],\n          prevCss = '',\n          nextCss = '',\n          yearMaxIdx = ymArr.length - 1,\n          yearIdx = this.state.yearIndexes[padIndex]; //yearMaxIdx\n\n      if (yearIdx === 0) prevCss = 'disable';\n      if (yearIdx === yearMaxIdx) nextCss = 'disable';\n      var yearActive = labelYear === value.year,\n          atMinYear = labelYear === ymArr[0].year,\n          atMaxYear = labelYear === ymArr[yearMaxIdx].year,\n          otherValue = false;\n\n      if (values.length > 1) {\n        otherValue = values[1 - padIndex];\n      }\n\n      var labelTextKey = padIndex === 0 ? 'from' : 'to',\n          labelPreText = void 0;\n\n      if (otherValue && this.props.lang[labelTextKey]) {\n        labelPreText = _react2.default.createElement('b', null, this.props.lang[labelTextKey]);\n      }\n\n      return _react2.default.createElement('div', {\n        className: 'rmp-pad',\n        key: padIndex\n      }, _react2.default.createElement('div', null, _react2.default.createElement('label', null, labelPreText, labelYear), _react2.default.createElement('i', {\n        className: [\"rmp-tab\", \"rmp-btn\", \"prev\", prevCss].join(' '),\n        'data-id': padIndex,\n        onClick: this.goPrevYear\n      }, '<'), _react2.default.createElement('i', {\n        className: [\"rmp-tab\", \"rmp-btn\", \"next\", nextCss].join(' '),\n        'data-id': padIndex,\n        onClick: this.goNextYear\n      }, '>')), _react2.default.createElement('ul', null, mapToArray(12, function (i) {\n        var css = '',\n            m = i + 1;\n\n        if (yearActive && m === value.month) {\n          css = 'active';\n        }\n\n        if (values.length > 1 && padIndex === 0 && (labelYear > value.year || labelYear === value.year && m > value.month)) {\n          css = 'select';\n        }\n\n        if (values.length > 1 && padIndex === 1 && (labelYear < value.year || labelYear === value.year && m < value.month)) {\n          css = 'select';\n        }\n\n        if (atMinYear && m < ymArr[0].min) {\n          css = 'disable';\n        }\n\n        if (atMaxYear && m > ymArr[yearMaxIdx].max) {\n          css = 'disable';\n        }\n\n        if (otherValue) {\n          var y = otherValue.year,\n              _m = otherValue.month || 0,\n              vy = labelYear,\n              vm = i + 1;\n\n          if (y === vy && _m && (padIndex === 0 && vm > _m || padIndex === 1 && vm < _m)) {\n            css = 'disable';\n          } else if (y > vy && padIndex === 1 || y < vy && padIndex === 0) {\n            css = 'disable';\n          }\n        }\n\n        var clickHandler = css !== 'disable' ? _this2.handleClickMonth : undefined;\n        return _react2.default.createElement('li', {\n          key: i,\n          className: [\"rmp-btn\", css].join(' '),\n          'data-id': padIndex + ':' + (i + 1),\n          onClick: clickHandler\n        }, months.length > i ? months[i] : i);\n      })));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var pads = [];\n      var popupClass = '';\n\n      if (this.state.values.length > 1) {\n        pads.push(this.optionPad(0), this.optionPad(1));\n        popupClass = 'range';\n      } else {\n        pads.push(this.optionPad(0));\n      }\n\n      return _react2.default.createElement('div', {\n        className: [\"month-picker\", this.props.className].join(' ')\n      }, this.props.children, _react2.default.createElement('div', {\n        className: [\"rmp-container\", \"rmp-table\", this.props.className, this.state.showed ? \"show\" : ''].join(' ')\n      }, _react2.default.createElement(_reactTapper2.default, {\n        className: 'rmp-overlay',\n        onTap: this._handleOverlayTouchTap\n      }), _react2.default.createElement('div', {\n        className: 'rmp-cell'\n      }, _react2.default.createElement('div', {\n        className: [\"rmp-popup\", popupClass, this.props.theme, this.state.showed ? \"show\" : ''].join(' ')\n      }, pads))));\n    }\n  }, {\n    key: 'dismiss',\n    value: function dismiss() {\n      if (this.state.closeable) {\n        this._onDismiss();\n      }\n    }\n  }, {\n    key: 'show',\n    value: function show() {\n      // prevent rapid show/hide\n      this._onShow();\n    }\n  }, {\n    key: '_handleOverlayTouchTap',\n    value: function _handleOverlayTouchTap(e) {\n      if (this.state.closeable) {\n        this._onDismiss();\n\n        this.props.onClickAway && this.props.onClickAway(e);\n      }\n    }\n  }, {\n    key: '_onShow',\n    value: function _onShow() {\n      setTimeout(function () {\n        this.state.closeable = true;\n      }.bind(this), 250);\n      this.setState({\n        showed: true\n      });\n      this.props.onShow && this.props.onShow();\n    }\n  }, {\n    key: '_onDismiss',\n    value: function _onDismiss(s) {\n      this.setState(Object.assign({\n        showed: false,\n        loading: false\n      }, s));\n      this.props.onDismiss && this.props.onDismiss(this.value());\n    }\n  }, {\n    key: 'handleClickMonth',\n    value: function handleClickMonth(e) {\n      if (this.state.showed) {\n        var refid = this.getDID(e).split(':'),\n            idx = parseInt(refid[0], 10),\n            month = parseInt(refid[1], 10),\n            year = this.state.labelYears[idx],\n            values = this.state.values;\n        values[idx] = {\n          year: year,\n          month: month\n        };\n        this.setState({\n          values: values\n        });\n        this.props.onChange(year, month, idx);\n      }\n    }\n  }, {\n    key: 'goPrevYear',\n    value: function goPrevYear(e) {\n      var idx = parseInt(this.getDID(e), 10);\n\n      if (this.state.yearIndexes[idx] > 0) {\n        this.setYear(idx, -1);\n      }\n    }\n  }, {\n    key: 'goNextYear',\n    value: function goNextYear(e) {\n      var idx = parseInt(this.getDID(e), 10);\n\n      if (this.state.yearIndexes[idx] < this.state.years.length - 1) {\n        this.setYear(idx, 1);\n      }\n    }\n  }, {\n    key: 'setYear',\n    value: function setYear(idx, step) {\n      var yearIndex = this.state.yearIndexes[idx] += step,\n          labelYears = this.state.labelYears,\n          theYear = this.state.years[yearIndex].year;\n      labelYears[idx] = theYear;\n      this.setState({\n        labelYears: labelYears\n      });\n      this.props.onYearChange && this.props.onYearChange(theYear);\n    }\n  }, {\n    key: 'getDID',\n    value: function getDID(e) {\n      var el = e.target;\n      return el.dataset ? el.dataset.id : el.getAttribute('data-id');\n    }\n  }, {\n    key: '_reset',\n    value: function _reset() {\n      var values = this.validValues(this.state.lastRange || this.state.lastValue, this.state.years, this.state.yearIndexes);\n      return {\n        values: values\n      };\n    }\n  }, {\n    key: '_keyDown',\n    value: function _keyDown(e) {\n      if (!this.state.showed) return;\n\n      if (e.key === 'Escape') {\n        this._onDismiss(this._reset());\n\n        e.stopPropagation();\n      } else if (e.key === 'Enter') {\n        this._onDismiss();\n\n        e.stopPropagation();\n      } else if (this.state.values.length === 1) {//console.log(e.key, e.keyCode)\n        // const value = this.state.values[0]\n        //     , year = value.year\n        // let month = value.month\n        // if (e.key === 'ArrowLeft') {\n        //     month--\n        // }\n        // else if (e.key === 'ArrowRight') {\n        //     month++\n        // }\n        // else if (e.key === 'ArrowUp') {\n        //     month -= 3\n        // }\n        // else if (e.key === 'ArrowDown') {\n        //     month += 3\n        // }\n        // if (month > 0 && month < 13 && month !== value.month) {\n        //     this.setState({ values: [{ year, month }] })\n        //     this.props.onChange(year, month, 0)\n        //     e.stopPropagation()\n        // }\n      }\n    }\n  }]);\n\n  return MonthPicker;\n}(_react.Component);\n\nMonthPicker.propTypes = {\n  years: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.number]),\n  value: _propTypes2.default.object,\n  range: _propTypes2.default.object,\n  lang: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),\n  onChange: _propTypes2.default.func,\n  onYearChange: _propTypes2.default.func,\n  onShow: _propTypes2.default.func,\n  onDismiss: _propTypes2.default.func,\n  onClickAway: _propTypes2.default.func,\n  theme: _propTypes2.default.string,\n  show: _propTypes2.default.bool\n};\nMonthPicker.defaultProps = {\n  years: getYearsByNum(5),\n  onChange: function onChange(year, month, idx) {},\n  theme: 'light',\n  show: false\n};\nexports.default = MonthPicker;","map":null,"metadata":{},"sourceType":"script"}